<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>30FA6EB3-2180-46F8-B2DD-EDA6B443CBB6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require 'date'
$: &lt;&lt; ENV['TM_BUNDLE_SUPPORT']
require "bin/GTD.rb"
include GTD

objects = GTD.process_directory
gtdacts = objects.map{|o| o.actions}.flatten
gtdprojects = objects.map{|o| o.projects}.flatten

class LogProject
  def initialize(date,name)
    @date = date
    @name = name
  end
  def getprojects
    return @name
  end
end

class LogAction
  def initialize(date,project,context,name)
    @date = date
    @project = project
    @context = context
    @name = name
  end
  def getcontexts
    return @context
  end
  def getprojects
    return @project
  end
end

acts = Array.new
projects = Array.new

today = Date.today - 1
review = today - 7

logfile = File.join(GTD.get_gtd_directory,"GTD.gtdlog")
if File.exists?(logfile) then
  log = File.open(logfile)
else
  puts "Log file #{logfile} not found. Review requires this file. You should run the Clean Current File command to generate a log file."
  exit
end

log.readlines.each { |line|
  if line =~ /^\/(.*)\/(.*)(\/@(\S+))?/ then
    logdate = Date.strptime($1, '%Y-%m-%d')
    project = $2
    if line =~ /^\/(.*)\/(.*)\/@(\S+)\s(.*)$/
      logact = LogAction.new($1.to_s,$2.to_s,$3.to_s,$4.to_s)
      acts &lt;&lt; logact
    else
      logproj = LogProject.new(logdate.to_s,project)
      projects &lt;&lt; LogProject.new(logdate.to_s,project)
    end
  end
}

pr = Printer.new
b = &lt;&lt;HTML
&lt;html&gt;
  &lt;head&gt;
    &lt;link rel="stylesheet" href="tm-file://#{ENV['TM_SUPPORT_PATH']}/css/default.css" type="text/css" media="screen" title="no title" charset="utf-8" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;h1&gt;GTD Review (#{review} - #{Date.today})&lt;/h1&gt;
HTML
e = &lt;&lt;HTML
  &lt;/body&gt;
&lt;/html&gt;
HTML
pr.raw b


pComplete = Array.new
projects.each {|p| pComplete &lt;&lt; p.getprojects }
if not pComplete.empty? then
  pComplete = pComplete.uniq.sort
  pr.raw "&lt;h2&gt;Projects completed&lt;/h2&gt;&lt;ul&gt;"
  pComplete.each {|p| 
    pr.raw "&lt;li&gt;#{p}"
  }
  pr.raw "&lt;/ul&gt;"
end

pUsed = Array.new
acts.each {|p| pUsed &lt;&lt; p.getprojects }
pUsed = pUsed.uniq.sort
diffarray = Array.new
gtdprojects.each{|p| diffarray &lt;&lt; p.name }
projectsDiff = diffarray - pUsed
projectsDiff = projectsDiff.uniq.sort
if not projectsDiff.empty? then
  pr.raw "&lt;h2&gt;Projects not acted on&lt;/h2&gt;"
  pr.table do
    pr.headers([ "Project", "Next Action", "Context", "Due by"])
    projectsDiff.each{|p| 
    project = gtdprojects.find{|i| i.name == p}
      text = project.next_action.link
      due = case project.next_action.due
        when "",nil
          ""
        when DateLate
          "&lt;span style=\"color:red\"&gt;#{project.next_action.due}&lt;/span&gt;"
        else
          project.next_action.due
      end
      pr.row([project.link, text, project.next_action.context, due])
  }
  end # pr.table
end

pr.raw "&lt;h2&gt;Dated Actions&lt;/h2&gt;"
pr.table do
  pr.headers([ "Context", "Action", "Project", "Due by"])
  gtdacts.each do |a|
    proj = if a.project != nil then a.project.link else "none" end
    if a.due != nil then
      due = case a.due
        when "",nil
          ""
        when DateLate
          "&lt;span style=\"color:red\"&gt;#{a.due}&lt;/span&gt;"
        else
          a.due
      end
      text = "&lt;a href=\"#{a.txmt}\"&gt;#{a.name}&lt;/a&gt;"
      pr.row([a.context, text, proj , due])
    end
  end
end

pr.raw e
puts pr.to_html
</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^~@-</string>
	<key>name</key>
	<string>Review</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>text.gtdalt</string>
	<key>uuid</key>
	<string>BB5DCAEF-2D31-47BC-B4D5-C221F026B2F3</string>
</dict>
</plist>
